namespace FlatBuffers;

struct Vector {
  x: double;
  y: double;
}

struct Vertex {
  x: double;
  y: double;
  z: double;
}

struct Edge {
  from: Vector;
  to: Vector;
}

table Polygon {
  edges: [Edge];
}

table Polyhedron {
  vertices: [Vertex];
}

struct Interval {
  min: double;
  max: double;
}

struct Id {
  depth: uint8;
  bits: uint16;
  interval: Interval;
}

table Projection {
  vectors: [Vector];
}

table Rectangle {
  theta: Id;
  phi: Id;
  projections: [Projection];
  out_indices: [uint32];
}

table Box {
  theta: Id;
  phi: Id;
  alpha: Id;
  projections: [Projection];
  projection: Polygon;
  rectangles: [Rectangle];
  terminal: bool;
  in_index: int32;
}

table Debug {
  hole: Polyhedron;
  plug: Polyhedron;
  boxes: [Box];
}

root_type Debug;


//namespace FlatBuffers;
//
//struct BinVector2 {
//  x: double;
//  y: double;
//}
//
//struct BinVector3 {
//  x: double;
//  y: double;
//  z: double;
//}
//
//struct BinEdge {
//  from: BinVector2;
//  to: BinVector2;
//}
//
//table BinPolygon {
//  edges: [BinEdge];
//}
//
//table BinPolyhedron {
//  vertices: [BinVector3];
//}
//
//table BinProjection {
//  vectors: [BinVector2];
//}
//
//struct BinRange {
//  depth: uint8;
//  bits: uint16;
//  min: double;
//  max: double;
//}
//
//table BinRange2 {
//  theta: BinRange;
//  phi: BinRange;
//  projections: [BinProjection];
//  out_indices: [uint32];
//}
//
//table BinRange3 {
//  theta: BinRange;
//  phi: BinRange;
//  alpha: BinRange;
//  projections: [BinProjection];
//  projection: BinPolygon;
//  rectangles: [BinRange2];
//  terminal: bool;
//  in_index: int32;
//}
//
//table BinData {
//  polyhedron: BinPolyhedron;
//  boxes: [BinRange3];
//}
//
//root_type BinData;
