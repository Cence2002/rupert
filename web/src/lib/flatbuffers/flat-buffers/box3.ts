// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { IdInterval } from '../flat-buffers/id-interval';
import { Polygon } from '../flat-buffers/polygon';
import { Projection } from '../flat-buffers/projection';


export class Box3 {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Box3 {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBox3(bb:flatbuffers.ByteBuffer, obj?:Box3):Box3 {
  return (obj || new Box3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBox3(bb:flatbuffers.ByteBuffer, obj?:Box3):Box3 {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Box3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

phi(obj?:IdInterval):IdInterval|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new IdInterval()).__init(this.bb_pos + offset, this.bb!) : null;
}

theta(obj?:IdInterval):IdInterval|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new IdInterval()).__init(this.bb_pos + offset, this.bb!) : null;
}

alpha(obj?:IdInterval):IdInterval|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new IdInterval()).__init(this.bb_pos + offset, this.bb!) : null;
}

projections(index: number, obj?:Projection):Projection|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Projection()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

projectionsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

projection(obj?:Polygon):Polygon|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new Polygon()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startBox3(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addPhi(builder:flatbuffers.Builder, phiOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, phiOffset, 0);
}

static addTheta(builder:flatbuffers.Builder, thetaOffset:flatbuffers.Offset) {
  builder.addFieldStruct(1, thetaOffset, 0);
}

static addAlpha(builder:flatbuffers.Builder, alphaOffset:flatbuffers.Offset) {
  builder.addFieldStruct(2, alphaOffset, 0);
}

static addProjections(builder:flatbuffers.Builder, projectionsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, projectionsOffset, 0);
}

static createProjectionsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startProjectionsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addProjection(builder:flatbuffers.Builder, projectionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, projectionOffset, 0);
}

static endBox3(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
