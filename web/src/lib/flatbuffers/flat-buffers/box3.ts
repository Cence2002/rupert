// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { IdInterval } from '../flat-buffers/id-interval';


export class Box3 {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Box3 {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

phi(obj?:IdInterval):IdInterval|null {
  return (obj || new IdInterval()).__init(this.bb_pos, this.bb!);
}

theta(obj?:IdInterval):IdInterval|null {
  return (obj || new IdInterval()).__init(this.bb_pos + 32, this.bb!);
}

alpha(obj?:IdInterval):IdInterval|null {
  return (obj || new IdInterval()).__init(this.bb_pos + 64, this.bb!);
}

static sizeOf():number {
  return 96;
}

static createBox3(builder:flatbuffers.Builder, phi_id_bits: bigint, phi_id_depth: number, phi_interval_min: number, phi_interval_max: number, theta_id_bits: bigint, theta_id_depth: number, theta_interval_min: number, theta_interval_max: number, alpha_id_bits: bigint, alpha_id_depth: number, alpha_interval_min: number, alpha_interval_max: number):flatbuffers.Offset {
  builder.prep(8, 96);
  builder.prep(8, 32);
  builder.prep(8, 16);
  builder.writeFloat64(alpha_interval_max);
  builder.writeFloat64(alpha_interval_min);
  builder.prep(8, 16);
  builder.pad(7);
  builder.writeInt8(alpha_id_depth);
  builder.writeInt64(alpha_id_bits);
  builder.prep(8, 32);
  builder.prep(8, 16);
  builder.writeFloat64(theta_interval_max);
  builder.writeFloat64(theta_interval_min);
  builder.prep(8, 16);
  builder.pad(7);
  builder.writeInt8(theta_id_depth);
  builder.writeInt64(theta_id_bits);
  builder.prep(8, 32);
  builder.prep(8, 16);
  builder.writeFloat64(phi_interval_max);
  builder.writeFloat64(phi_interval_min);
  builder.prep(8, 16);
  builder.pad(7);
  builder.writeInt8(phi_id_depth);
  builder.writeInt64(phi_id_bits);
  return builder.offset();
}

}
