// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Box2 } from '../flat-buffers/box2';
import { Box3 } from '../flat-buffers/box3';


export class Cover {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Cover {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsCover(bb:flatbuffers.ByteBuffer, obj?:Cover):Cover {
  return (obj || new Cover()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsCover(bb:flatbuffers.ByteBuffer, obj?:Cover):Cover {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Cover()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

full():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

box3(obj?:Box3):Box3|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Box3()).__init(this.bb_pos + offset, this.bb!) : null;
}

box2s(index: number, obj?:Box2):Box2|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Box2()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 64, this.bb!) : null;
}

box2sLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startCover(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addFull(builder:flatbuffers.Builder, full:boolean) {
  builder.addFieldInt8(0, +full, +false);
}

static addBox3(builder:flatbuffers.Builder, box3Offset:flatbuffers.Offset) {
  builder.addFieldStruct(1, box3Offset, 0);
}

static addBox2s(builder:flatbuffers.Builder, box2sOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, box2sOffset, 0);
}

static startBox2sVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(64, numElems, 8);
}

static endCover(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
