// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Cover } from '../flat-buffers/cover';
import { Polyhedron } from '../flat-buffers/polyhedron';


export class Data {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Data {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsData(bb:flatbuffers.ByteBuffer, obj?:Data):Data {
  return (obj || new Data()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsData(bb:flatbuffers.ByteBuffer, obj?:Data):Data {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Data()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

hole(obj?:Polyhedron):Polyhedron|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Polyhedron()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

plug(obj?:Polyhedron):Polyhedron|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new Polyhedron()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

covers(index: number, obj?:Cover):Cover|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new Cover()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

coversLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startData(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, descriptionOffset, 0);
}

static addHole(builder:flatbuffers.Builder, holeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, holeOffset, 0);
}

static addPlug(builder:flatbuffers.Builder, plugOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, plugOffset, 0);
}

static addCovers(builder:flatbuffers.Builder, coversOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, coversOffset, 0);
}

static createCoversVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startCoversVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endData(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishDataBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

static finishSizePrefixedDataBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

}
