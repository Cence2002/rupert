// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Id } from '../flat-buffers/id';
import { Interval } from '../flat-buffers/interval';


export class IdInterval {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):IdInterval {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

id(obj?:Id):Id|null {
  return (obj || new Id()).__init(this.bb_pos, this.bb!);
}

interval(obj?:Interval):Interval|null {
  return (obj || new Interval()).__init(this.bb_pos + 8, this.bb!);
}

static sizeOf():number {
  return 24;
}

static createIdInterval(builder:flatbuffers.Builder, id_bits: number, id_depth: number, interval_min: number, interval_max: number):flatbuffers.Offset {
  builder.prep(8, 24);
  builder.prep(8, 16);
  builder.writeFloat64(interval_max);
  builder.writeFloat64(interval_min);
  builder.prep(4, 8);
  builder.pad(3);
  builder.writeInt8(id_depth);
  builder.writeInt32(id_bits);
  return builder.offset();
}

}
