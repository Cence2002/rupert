// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Interval } from '../flat-buffers/interval';


export class Id {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Id {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

bits():bigint {
  return this.bb!.readUint64(this.bb_pos);
}

depth():number {
  return this.bb!.readUint8(this.bb_pos + 8);
}

interval(obj?:Interval):Interval|null {
  return (obj || new Interval()).__init(this.bb_pos + 16, this.bb!);
}

static sizeOf():number {
  return 32;
}

static createId(builder:flatbuffers.Builder, bits: bigint, depth: number, interval_min: number, interval_max: number):flatbuffers.Offset {
  builder.prep(8, 32);
  builder.prep(8, 16);
  builder.writeFloat64(interval_max);
  builder.writeFloat64(interval_min);
  builder.pad(7);
  builder.writeInt8(depth);
  builder.writeInt64(bits);
  return builder.offset();
}

}
