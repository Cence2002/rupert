// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Line } from '../flat-buffers/line';


export class Polygon {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Polygon {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPolygon(bb:flatbuffers.ByteBuffer, obj?:Polygon):Polygon {
  return (obj || new Polygon()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPolygon(bb:flatbuffers.ByteBuffer, obj?:Polygon):Polygon {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Polygon()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

lines(index: number, obj?:Line):Line|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Line()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 32, this.bb!) : null;
}

linesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startPolygon(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addLines(builder:flatbuffers.Builder, linesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, linesOffset, 0);
}

static startLinesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(32, numElems, 8);
}

static endPolygon(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPolygon(builder:flatbuffers.Builder, linesOffset:flatbuffers.Offset):flatbuffers.Offset {
  Polygon.startPolygon(builder);
  Polygon.addLines(builder, linesOffset);
  return Polygon.endPolygon(builder);
}
}
