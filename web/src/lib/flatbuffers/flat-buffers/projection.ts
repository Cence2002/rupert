// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Vector2 } from '../flat-buffers/vector2';


export class Projection {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Projection {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsProjection(bb:flatbuffers.ByteBuffer, obj?:Projection):Projection {
  return (obj || new Projection()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsProjection(bb:flatbuffers.ByteBuffer, obj?:Projection):Projection {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Projection()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

vertices(index: number, obj?:Vector2):Vector2|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Vector2()).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;
}

verticesLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startProjection(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addVertices(builder:flatbuffers.Builder, verticesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, verticesOffset, 0);
}

static startVerticesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(16, numElems, 8);
}

static endProjection(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createProjection(builder:flatbuffers.Builder, verticesOffset:flatbuffers.Offset):flatbuffers.Offset {
  Projection.startProjection(builder);
  Projection.addVertices(builder, verticesOffset);
  return Projection.endProjection(builder);
}
}
